'''
/notes GET
/notes POST
/notes/<id> GET
/notes/<id> PUT
/notes/<id> DELETE


'''

#MANUAL VIEWS

""" @api_view(['POST'])
def createNote(request):
    data = request.data
    note = React_Note.objects.create()
    serialized=Note_Serializer(note, data) #serialize multiple objects or single object? --> return query set which is object

    if serialized.is_valid():
        serialized.save() #create current note with JSON data provided; 
    return Response(serialized.data) """

""" @api_view(['DELETE'])
def deleteNote(request,pk):
    note = React_Note.objects.get(id=pk)
    note.delete()
    return Response('Note was Deleted') """

""" @api_view(['PUT']) #DESERIALIZE: CONVERT JSON REQUEST.DATA TO PYTHON OBJECTS FOR SAVING
def updateNote(request,pk):
    data = request.data
    note = React_Note.objects.get(id=pk)
    serialized=Note_Serializer(instance=note, data = data) #serialize multiple objects or single object? --> return query set which is object
    if serialized.is_valid():
        serialized.save() #update current note with JSON data provided
    return Response(serialized.data) """

""" 
@api_view(['GET'])
def getRoutes(request):
    routes=\
        [
            {'Endpoint':'/notes/id/delete/',
            'method':'DELETE',
            'body':None,
            'description':'Deletes and exiting note'}
        ]
    return Response(routes) """


""" @api_view(['GET','POST'])
def React_Room_Get(request):
    queryset=React_Room.objects.all()
    serialized= Room_Serializer(queryset,many=True)
    if request.method =='GET':

        return Response(serialized.data) """